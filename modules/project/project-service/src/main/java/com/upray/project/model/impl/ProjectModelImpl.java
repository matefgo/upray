/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.upray.project.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.upray.project.model.Project;
import com.upray.project.model.ProjectModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Project service. Represents a row in the &quot;Project_Project&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ProjectModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProjectImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProjectImpl
 * @generated
 */
@JSON(strict = true)
public class ProjectModelImpl
	extends BaseModelImpl<Project> implements ProjectModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a project model instance should use the <code>Project</code> interface instead.
	 */
	public static final String TABLE_NAME = "Project_Project";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"projectId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"customerId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"originalVersion", Types.VARCHAR},
		{"upgradeVersion", Types.VARCHAR}, {"status", Types.INTEGER},
		{"phase", Types.INTEGER}, {"deadline", Types.TIMESTAMP},
		{"deliveryDate", Types.TIMESTAMP}, {"contractDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("projectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("customerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("originalVersion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("upgradeVersion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("phase", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("deadline", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("deliveryDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("contractDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Project_Project (uuid_ VARCHAR(75) null,projectId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,customerId LONG,name VARCHAR(75) null,originalVersion VARCHAR(75) null,upgradeVersion VARCHAR(75) null,status INTEGER,phase INTEGER,deadline DATE null,deliveryDate DATE null,contractDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table Project_Project";

	public static final String ORDER_BY_JPQL =
		" ORDER BY project.contractDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Project_Project.contractDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NAME_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CONTRACTDATE_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ProjectModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _projectId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProjectId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _projectId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Project.class;
	}

	@Override
	public String getModelClassName() {
		return Project.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Project, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Project, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Project, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Project)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Project, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Project, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Project)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Project, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Project, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Project, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Project, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Project, Object>>();

			attributeGetterFunctions.put("uuid", Project::getUuid);
			attributeGetterFunctions.put("projectId", Project::getProjectId);
			attributeGetterFunctions.put("companyId", Project::getCompanyId);
			attributeGetterFunctions.put("userId", Project::getUserId);
			attributeGetterFunctions.put("userName", Project::getUserName);
			attributeGetterFunctions.put("createDate", Project::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", Project::getModifiedDate);
			attributeGetterFunctions.put("customerId", Project::getCustomerId);
			attributeGetterFunctions.put("name", Project::getName);
			attributeGetterFunctions.put(
				"originalVersion", Project::getOriginalVersion);
			attributeGetterFunctions.put(
				"upgradeVersion", Project::getUpgradeVersion);
			attributeGetterFunctions.put("status", Project::getStatus);
			attributeGetterFunctions.put("phase", Project::getPhase);
			attributeGetterFunctions.put("deadline", Project::getDeadline);
			attributeGetterFunctions.put(
				"deliveryDate", Project::getDeliveryDate);
			attributeGetterFunctions.put(
				"contractDate", Project::getContractDate);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Project, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Project, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Project, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Project, String>)Project::setUuid);
			attributeSetterBiConsumers.put(
				"projectId", (BiConsumer<Project, Long>)Project::setProjectId);
			attributeSetterBiConsumers.put(
				"companyId", (BiConsumer<Project, Long>)Project::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId", (BiConsumer<Project, Long>)Project::setUserId);
			attributeSetterBiConsumers.put(
				"userName", (BiConsumer<Project, String>)Project::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<Project, Date>)Project::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<Project, Date>)Project::setModifiedDate);
			attributeSetterBiConsumers.put(
				"customerId",
				(BiConsumer<Project, Long>)Project::setCustomerId);
			attributeSetterBiConsumers.put(
				"name", (BiConsumer<Project, String>)Project::setName);
			attributeSetterBiConsumers.put(
				"originalVersion",
				(BiConsumer<Project, String>)Project::setOriginalVersion);
			attributeSetterBiConsumers.put(
				"upgradeVersion",
				(BiConsumer<Project, String>)Project::setUpgradeVersion);
			attributeSetterBiConsumers.put(
				"status", (BiConsumer<Project, Integer>)Project::setStatus);
			attributeSetterBiConsumers.put(
				"phase", (BiConsumer<Project, Integer>)Project::setPhase);
			attributeSetterBiConsumers.put(
				"deadline", (BiConsumer<Project, Date>)Project::setDeadline);
			attributeSetterBiConsumers.put(
				"deliveryDate",
				(BiConsumer<Project, Date>)Project::setDeliveryDate);
			attributeSetterBiConsumers.put(
				"contractDate",
				(BiConsumer<Project, Date>)Project::setContractDate);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_projectId = projectId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCustomerId() {
		return _customerId;
	}

	@Override
	public void setCustomerId(long customerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customerId = customerId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalName() {
		return getColumnOriginalValue("name");
	}

	@JSON
	@Override
	public String getOriginalVersion() {
		if (_originalVersion == null) {
			return "";
		}
		else {
			return _originalVersion;
		}
	}

	@Override
	public void setOriginalVersion(String originalVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_originalVersion = originalVersion;
	}

	@JSON
	@Override
	public String getUpgradeVersion() {
		if (_upgradeVersion == null) {
			return "";
		}
		else {
			return _upgradeVersion;
		}
	}

	@Override
	public void setUpgradeVersion(String upgradeVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_upgradeVersion = upgradeVersion;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public int getPhase() {
		return _phase;
	}

	@Override
	public void setPhase(int phase) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phase = phase;
	}

	@JSON
	@Override
	public Date getDeadline() {
		return _deadline;
	}

	@Override
	public void setDeadline(Date deadline) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deadline = deadline;
	}

	@JSON
	@Override
	public Date getDeliveryDate() {
		return _deliveryDate;
	}

	@Override
	public void setDeliveryDate(Date deliveryDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deliveryDate = deliveryDate;
	}

	@JSON
	@Override
	public Date getContractDate() {
		return _contractDate;
	}

	@Override
	public void setContractDate(Date contractDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contractDate = contractDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Project.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Project.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Project toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Project>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProjectImpl projectImpl = new ProjectImpl();

		projectImpl.setUuid(getUuid());
		projectImpl.setProjectId(getProjectId());
		projectImpl.setCompanyId(getCompanyId());
		projectImpl.setUserId(getUserId());
		projectImpl.setUserName(getUserName());
		projectImpl.setCreateDate(getCreateDate());
		projectImpl.setModifiedDate(getModifiedDate());
		projectImpl.setCustomerId(getCustomerId());
		projectImpl.setName(getName());
		projectImpl.setOriginalVersion(getOriginalVersion());
		projectImpl.setUpgradeVersion(getUpgradeVersion());
		projectImpl.setStatus(getStatus());
		projectImpl.setPhase(getPhase());
		projectImpl.setDeadline(getDeadline());
		projectImpl.setDeliveryDate(getDeliveryDate());
		projectImpl.setContractDate(getContractDate());

		projectImpl.resetOriginalValues();

		return projectImpl;
	}

	@Override
	public Project cloneWithOriginalValues() {
		ProjectImpl projectImpl = new ProjectImpl();

		projectImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		projectImpl.setProjectId(
			this.<Long>getColumnOriginalValue("projectId"));
		projectImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		projectImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		projectImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		projectImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		projectImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		projectImpl.setCustomerId(
			this.<Long>getColumnOriginalValue("customerId"));
		projectImpl.setName(this.<String>getColumnOriginalValue("name"));
		projectImpl.setOriginalVersion(
			this.<String>getColumnOriginalValue("originalVersion"));
		projectImpl.setUpgradeVersion(
			this.<String>getColumnOriginalValue("upgradeVersion"));
		projectImpl.setStatus(this.<Integer>getColumnOriginalValue("status"));
		projectImpl.setPhase(this.<Integer>getColumnOriginalValue("phase"));
		projectImpl.setDeadline(this.<Date>getColumnOriginalValue("deadline"));
		projectImpl.setDeliveryDate(
			this.<Date>getColumnOriginalValue("deliveryDate"));
		projectImpl.setContractDate(
			this.<Date>getColumnOriginalValue("contractDate"));

		return projectImpl;
	}

	@Override
	public int compareTo(Project project) {
		int value = 0;

		value = DateUtil.compareTo(
			getContractDate(), project.getContractDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Project)) {
			return false;
		}

		Project project = (Project)object;

		long primaryKey = project.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Project> toCacheModel() {
		ProjectCacheModel projectCacheModel = new ProjectCacheModel();

		projectCacheModel.uuid = getUuid();

		String uuid = projectCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			projectCacheModel.uuid = null;
		}

		projectCacheModel.projectId = getProjectId();

		projectCacheModel.companyId = getCompanyId();

		projectCacheModel.userId = getUserId();

		projectCacheModel.userName = getUserName();

		String userName = projectCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			projectCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			projectCacheModel.createDate = createDate.getTime();
		}
		else {
			projectCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			projectCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			projectCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		projectCacheModel.customerId = getCustomerId();

		projectCacheModel.name = getName();

		String name = projectCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			projectCacheModel.name = null;
		}

		projectCacheModel.originalVersion = getOriginalVersion();

		String originalVersion = projectCacheModel.originalVersion;

		if ((originalVersion != null) && (originalVersion.length() == 0)) {
			projectCacheModel.originalVersion = null;
		}

		projectCacheModel.upgradeVersion = getUpgradeVersion();

		String upgradeVersion = projectCacheModel.upgradeVersion;

		if ((upgradeVersion != null) && (upgradeVersion.length() == 0)) {
			projectCacheModel.upgradeVersion = null;
		}

		projectCacheModel.status = getStatus();

		projectCacheModel.phase = getPhase();

		Date deadline = getDeadline();

		if (deadline != null) {
			projectCacheModel.deadline = deadline.getTime();
		}
		else {
			projectCacheModel.deadline = Long.MIN_VALUE;
		}

		Date deliveryDate = getDeliveryDate();

		if (deliveryDate != null) {
			projectCacheModel.deliveryDate = deliveryDate.getTime();
		}
		else {
			projectCacheModel.deliveryDate = Long.MIN_VALUE;
		}

		Date contractDate = getContractDate();

		if (contractDate != null) {
			projectCacheModel.contractDate = contractDate.getTime();
		}
		else {
			projectCacheModel.contractDate = Long.MIN_VALUE;
		}

		return projectCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Project, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Project, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Project, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Project)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Project>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Project.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _projectId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _customerId;
	private String _name;
	private String _originalVersion;
	private String _upgradeVersion;
	private int _status;
	private int _phase;
	private Date _deadline;
	private Date _deliveryDate;
	private Date _contractDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Project, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Project)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("projectId", _projectId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("customerId", _customerId);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("originalVersion", _originalVersion);
		_columnOriginalValues.put("upgradeVersion", _upgradeVersion);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("phase", _phase);
		_columnOriginalValues.put("deadline", _deadline);
		_columnOriginalValues.put("deliveryDate", _deliveryDate);
		_columnOriginalValues.put("contractDate", _contractDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("projectId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("customerId", 128L);

		columnBitmasks.put("name", 256L);

		columnBitmasks.put("originalVersion", 512L);

		columnBitmasks.put("upgradeVersion", 1024L);

		columnBitmasks.put("status", 2048L);

		columnBitmasks.put("phase", 4096L);

		columnBitmasks.put("deadline", 8192L);

		columnBitmasks.put("deliveryDate", 16384L);

		columnBitmasks.put("contractDate", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Project _escapedModel;

}